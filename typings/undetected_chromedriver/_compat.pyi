"""
This type stub file was generated by pyright.
"""

"""

         888                                                  888         d8b
         888                                                  888         Y8P
         888                                                  888
 .d8888b 88888b.  888d888 .d88b.  88888b.d88b.   .d88b.   .d88888 888d888 888 888  888  .d88b.  888d888
d88P"    888 "88b 888P"  d88""88b 888 "888 "88b d8P  Y8b d88" 888 888P"   888 888  888 d8P  Y8b 888P"
888      888  888 888    888  888 888  888  888 88888888 888  888 888     888 Y88  88P 88888888 888
Y88b.    888  888 888    Y88..88P 888  888  888 Y8b.     Y88b 888 888     888  Y8bd8P  Y8b.     888
 "Y8888P 888  888 888     "Y88P"  888  888  888  "Y8888   "Y88888 888     888   Y88P    "Y8888  888   88888888

by UltrafunkAmsterdam (https://github.com/ultrafunkamsterdam)

"""
TARGET_VERSION = ...
logger = ...
class Chrome:
    def __new__(cls, *args, emulate_touch=..., **kwargs): # -> WebDriver:
        ...
    


class ChromeOptions:
    def __new__(cls, *args, **kwargs): # -> Options:
        ...
    


class ChromeDriverManager:
    installed = ...
    selenium_patched = ...
    target_version = ...
    DL_BASE = ...
    def __init__(self, executable_path=..., target_version=..., *args, **kwargs) -> None:
        ...
    
    def patch_selenium_webdriver(self_): # -> None:
        """
        Patches selenium package Chrome, ChromeOptions classes for current session

        :return:
        """
        ...
    
    def install(self, patch_selenium=...): # -> None:
        """
        Initialize the patch

        This will:
         download chromedriver if not present
         patch the downloaded chromedriver
         patch selenium package if <patch_selenium> is True (default)

        :param patch_selenium: patch selenium webdriver classes for Chrome and ChromeDriver (for current python session)
        :return:
        """
        ...
    
    def get_release_version_number(self): # -> LooseVersion:
        """
        Gets the latest major version available, or the latest major version of self.target_version if set explicitly.

        :return: version string
        """
        ...
    
    def fetch_chromedriver(self): # -> str:
        """
        Downloads ChromeDriver from source and unpacks the executable

        :return: on success, name of the unpacked executable
        """
        ...
    
    @staticmethod
    def random_cdc(): # -> bytes:
        ...
    
    def patch_binary(self): # -> int:
        """
        Patches the ChromeDriver binary

        :return: False on failure, binary name on success
        """
        ...
    


def install(executable_path=..., target_version=..., *args, **kwargs): # -> None:
    ...

