[options]
python_requires = >=3.11

[isort]
profile = black
combine_as_imports = true
line_length = 80
skip_glob = typings/**

[bandit]
# B102 Handled by wemake-python-styleguide 421
# B311 Random is faster and fine for non cryptographic uses
# B301, B403 pickle is fine if you trust the input data
skips = B102,B311,B301,B403
exclude = ./.venv

[pydocstyle]
convention = google

[pylint.]
jobs = 0
py-version = 3.11
ignore = .venv,typings
score = false

disable =
    arguments-renamed, # Subclasses are meant to be more specific, so argument names can be more specific too
    exec-used, eval-used, # Handled by wemake-python-styleguide 421
    line-too-long, # Formatting handled by black
    missing-module-docstring, missing-function-docstring, missing-class-docstring, # Handled by pydocstyle
    not-callable, undefined-variable, # Handled by pylance
    too-few-public-methods, too-many-instance-attributes, too-many-arguments, # Hard number limits are not good rules
    unused-import, # Handled by flake8 401
    unused-variable, # Handled by flake8 841
    import-private-name, # Forbids low-level imports
    bare-except # Handled by bugbear 001

load-plugins =
    pylint.extensions.bad_builtin,
    pylint.extensions.broad_try_clause,
    pylint.extensions.check_elif,
    pylint.extensions.code_style,
    pylint.extensions.comparetozero,
    pylint.extensions.comparison_placement,
    pylint.extensions.confusing_elif,
    pylint.extensions.consider_ternary_expression,
    pylint.extensions.docparams,
    pylint.extensions.docstyle,
    pylint.extensions.empty_comment,
    pylint.extensions.emptystring,
    pylint.extensions.eq_without_hash,
    pylint.extensions.for_any_all,
    pylint.extensions.no_self_use,
    pylint.extensions.overlapping_exceptions,
    pylint.extensions.private_import,
    pylint.extensions.redefined_loop_name,
    pylint.extensions.redefined_variable_type,
    pylint.extensions.set_membership,
    pylint.extensions.typing,

[darglint]
docstring_style = google
strictness = full

[flake8]
noqa-require-code = true
suppress-dummy-args = true
max-line-length = 80

enable-extensions = ANN401
exclude = .venv,typings

extend-ignore =
    ANN101,ANN102, # Most of the time annotating self and cls is not needed
    D1,D2,D3,D4, # pydocstyle runs separately
    DAR, # Throws false positives
    DUO102, # Random is faster and fine for non cryptographic uses
    DUO103, # Handled by bandit
    DUO104,DUO105,SCS101, # Handled by wemake-python-styleguide 421
    E0,E1,E2,E3,E4,E5,E6,E7,E9,W0,W1,W2,W3,W4,W5,W6, # pycodestyle runs separately
    F821,F841, # Handled by Pylance
    I00, # isort runs separately
    PIE786, # Handled by bugbear 001
    Q000, LIT00, # Formatting handled by black
    R504,PIE781, # Handled by wemake-python-styleguide 331
    RST201,RST203,RST213,RST301, # Google docstrings are precessed by Napoleon
    S1,S2,S3,S4,S5,S6,S7, # bandit runs separately
    SCS108, # Handled by bandit 101
    TC400, # It can be intentional not to print the stack trace
    TC101, # Does not consider two statements that throw the same error
    VNE001, # Handled by wemake-python-styleguide 111
    WPS115, # Storing constans in classes is ok
    WPS201,WPS202,WPS211,WPS213,WPS222, # Hard number limits are not good rules
    WPS210, # This limits the amount of local variables
    WPS214 # This limits the amount of methods in a class
    WPS226, # Flags dicts with constants
    WPS305, # This rule forbids f-strings
    WPS306, # Implicit object base class is ok
    WPS320, # Multiline types can still be readable
    WPS323, # Flags strings used for logging
    WPS332, # Walrus operator is ok
    WPS336, # This rule disables string concat
    WPS337, # Multiline conditions are ok
    WPS412, # Some code in __init__.py could be used to flatten the package
    WPS428, # Flags ... in overloads
    WPS436, # Forbids low-level imports
    WPS437, # Handled by pylint protected-access
    WPS465, # Flags type union |
    WPS602, # Static methods are ok
    WPS603, # This rule forbids defining __delitem__

require-plugins =
    dlint, # DUO
    flake8-bugbear, # B001-950
    flake8-pie, # PIE
    flake8-simplify, # SIM
    # WPS for own,
    # bugbear B001-008
    # comprehensions C400-411
    # commas C812-819
    # mccabe C901
    # docstrings D100-417
    # pycodestyle E001-902, W001-606
    # eradicate E800
    # flake8 F400-F901
    # isort I001-005
    # broken-line N400
    # pep8 naming  N800-820
    # string-format P101-P302
    # quotes Q000
    # bandit S100-710
    # debugger T100
    # rst-docstrings RST
    # darglint DAR
    wemake-python-styleguide,
    flake8-2020, # YTT
    flake8-async, # ASYNC
    flake8-encodings, # ENC
    flake8-secure-coding-standard, # SCS
    flake8-string-format, # FMT
    flake8-useless-assert, # ULA
    flake8-warnings, # WS001-WS011
    flake8-mutable, # M511
    flake8-comprehensions, # C400-417
    flake8-datetimez, # DTZ
    flake8-literal, # LIT
    flake8-newspaper-style, # NEW
    flake8-return, # R501-508
    Flake8-SQL, # Q440-449
    tryceratops, # TC002-401
    flake8-no-implicit-concat, # NIC
    flake8-use-fstring, # FS001-003
    flake8-use-pathlib, # PL100-124
    flake8-no-pep420, # INP
    flake8-variables-names, # VNE
    flake8-annotations-complexity, # TAE
    flake8-cognitive-complexity, # CCR
    flake8-expression-complexity, # ECE
    flake8-comments, # CM001
    flake8-executable, # EXE
    flake8-noqa, # NQA
    flake8_sphinx_links, # SXL
    flake8-tidy-imports, # I250-252
    flake8-type-checking, # TC001-006
    flake8-aaa, # AAA
    flake8-assertive, # A500-504
    flake8-mock, # M001
    flake8-pytest-style, # PT001-026
    flake8-annotations, # ANN
    flake8-new-union-types, # NU001-003
    flake8-pep585, # PEA
    flake8-future-annotations # FA100-101
