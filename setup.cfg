[options]
python_requires = >=3.11

[isort]
profile = black
combine_as_imports = true
line_length = 80
skip_glob = typings/**

[bandit]
# B101 Breaks asserts for type-checking
# B102 Handled by wemake-python-styleguide 421
# B311 Random is faster and fine for non cryptographic uses
# B301, B403 pickle is fine if you trust the input data
skips = B101,B102,B311,B301,B403
exclude = ./.venv

[pydocstyle]
convention = google

[pylint.]
jobs = 0
py-version = 3.11
ignore = .venv,typings
score = false

disable =
    arguments-renamed, # Subclasses are meant to be more specific, so argument names can be more specific too
    exec-used, eval-used, # Handled by wemake-python-styleguide 421
    line-too-long, # Formatting handled by black
    missing-module-docstring, missing-function-docstring, missing-class-docstring, # Handled by pydocstyle
    not-callable, undefined-variable, # Handled by pylance
    too-few-public-methods, too-many-instance-attributes, too-many-arguments, # Hard number limits are not good rules
    unused-import, # Handled by flake8 401
    unused-variable, # Handled by flake8 841
    import-private-name, # Forbids low-level imports
    bare-except # Handled by bugbear 001

load-plugins =
    pylint.extensions.bad_builtin,
    pylint.extensions.broad_try_clause,
    pylint.extensions.check_elif,
    pylint.extensions.code_style,
    pylint.extensions.comparison_placement,
    pylint.extensions.confusing_elif,
    pylint.extensions.consider_ternary_expression,
    pylint.extensions.docparams,
    pylint.extensions.docstyle,
    pylint.extensions.empty_comment,
    pylint.extensions.eq_without_hash,
    pylint.extensions.for_any_all,
    pylint.extensions.no_self_use,
    pylint.extensions.overlapping_exceptions,
    pylint.extensions.private_import,
    pylint.extensions.redefined_loop_name,
    pylint.extensions.redefined_variable_type,
    pylint.extensions.set_membership,
    pylint.extensions.typing,

[darglint]
docstring_style = google
strictness = full

[flake8]
noqa-require-code = true
suppress-dummy-args = true
max-line-length = 80

enable-extensions = ANN401
exclude = .venv,typings

extend-ignore =
    # Most of the time annotating self and cls is not needed
    ANN101,ANN102,
    # pydocstyle runs separately
    D1,D2,D3,D4,
    # Throws false positives
    DAR,
    # Random is faster and fine for non cryptographic uses
    DUO102,
    # Handled by bandit
    DUO103,
    # Handled by wemake-python-styleguide 421
    DUO104,DUO105,SCS101,
    # pycodestyle runs separately
    E0,E1,E2,E3,E4,E5,E6,E7,E9,W0,W1,W2,W3,W4,W5,W6,
    # Handled by Pylance
    F821,F841,
    # isort runs separately
    I00,
    # Handled by bugbear 001
    PIE786,
    # Formatting handled by black
    Q000, LIT00,
    # Handled by wemake-python-styleguide 331
    R504,PIE781,
    # Google docstrings are precessed by Napoleon
    RST201,RST203,RST213,RST301,
    # bandit runs separately
    S1,S2,S3,S4,S5,S6,S7,
    # Handled by bandit 101
    SCS108,
    # This limits annotation complexity
    TAE002,WPS234,
    # Type-checking blocks are not always needed
    TC001,TC002,TC003,
    # Does not consider two statements that throw the same error
    TRY101,
    # It can be intentional not to print the stack trace
    TRY400,
    # Handled by wemake-python-styleguide 111
    VNE001,
    # Storing constans in classes is ok
    WPS115,
    # Hard number limits are not good rules
    WPS201,WPS202,WPS211,WPS213,WPS222,
    # This limits the amount of local variables
    WPS210,
    # This limits the amount of methods in a class
    WPS214
    # Flags dicts with constants
    WPS226,
    # This rule forbids f-strings
    WPS305,
    # Implicit object base class is ok
    WPS306,
    # Multiline types can still be readable
    WPS320,
    # Flags strings used for logging
    WPS323,
    # Walrus operator is ok
    WPS332,
    # This rule disables string concat
    WPS336,
    # Multiline conditions are ok
    WPS337,
    # Some code in __init__.py could be used to flatten the package
    WPS412,
    # Flags ... in overloads
    WPS428,
    # Forbids low-level imports
    WPS436,
    # Handled by pylint protected-access
    WPS437,
    # Flags type union |
    WPS465,
    # Static methods are ok
    WPS602,
    # This rule forbids defining __delitem__
    WPS603,

require-plugins =
    # DUO
    dlint,
    # B001-950
    flake8-bugbear,
    # PIE
    flake8-pie,
    # SIM
    flake8-simplify,
    # WPS for own,
    # bugbear B001-008
    # comprehensions C400-411
    # commas C812-819
    # mccabe C901
    # docstrings D100-417
    # pycodestyle E001-902, W001-606
    # eradicate E800
    # flake8 F400-F901
    # isort I001-005
    # broken-line N400
    # pep8 naming  N800-820
    # string-format P101-P302
    # quotes Q000
    # bandit S100-710
    # debugger T100
    # rst-docstrings RST
    # darglint DAR
    wemake-python-styleguide,
    # YTT
    flake8-2020,
    # ASYNC
    flake8-async,
    # ENC
    flake8-encodings,
    # SCS
    flake8-secure-coding-standard,
    # FMT
    flake8-string-format,
    # WS001-WS011
    flake8-warnings,
    # M511
    flake8-mutable,
    # C400-417
    flake8-comprehensions,
    # DTZ
    flake8-datetimez,
    # LIT
    flake8-literal,
    # NEW
    flake8-newspaper-style,
    # R501-508
    flake8-return,
    # Q440-449
    Flake8-SQL,
    # TC002-401
    tryceratops,
    # NIC
    flake8-no-implicit-concat,
    # FS001-003
    flake8-use-fstring,
    # PL100-124
    flake8-use-pathlib,
    # INP
    flake8-no-pep420,
    # VNE
    flake8-variables-names,
    # TAE
    flake8-annotations-complexity,
    # CCR
    flake8-cognitive-complexity,
    # ECE
    flake8-expression-complexity,
    # CM001
    flake8-comments,
    # EXE
    flake8-executable,
    # NQA
    flake8-noqa,
    # SXL
    flake8_sphinx_links,
    # I250-252
    flake8-tidy-imports,
    # TC001-006
    flake8-type-checking,
    # AAA
    flake8-aaa,
    # A500-504
    flake8-assertive,
    # M001
    flake8-mock,
    # PT001-026
    flake8-pytest-style,
    # ANN
    flake8-annotations,
    # NU001-003
    flake8-new-union-types,
    # PEA
    flake8-pep585,
    # FA100-101
    flake8-future-annotations
